{"ast":null,"code":"var _jsxFileName = \"/home/rohit/frontend/src/GasTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x41d63CeB5a7B86197D788b8a8830337903Ffd3A0\";\nconst contractABI = [\"function updateWithMemory(string memory newText) public pure returns (string memory)\", \"function updateWithStorage(string memory newText) public\", \"function storedText() public view returns (string)\", \"event TransactionDone(uint256 gasUsed, string transactionType)\"];\nexport default function GasTracker() {\n  _s();\n  const [gasLogs, setGasLogs] = useState([]);\n  const [storedText, setStoredText] = useState(\"\");\n  async function executeTransaction(type) {\n    if (!window.ethereum) return alert(\"Please install MetaMask\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n    try {\n      let gasUsed = 0;\n      if (type === \"memory\") {\n        const startGas = await provider.getFeeData();\n        await contract.updateWithMemory(\"Temporary Note\");\n        const endGas = await provider.getFeeData();\n        gasUsed = (endGas.gasPrice - startGas.gasPrice).toString();\n      } else {\n        const tx = await contract.updateWithStorage(\"Permanent Note\");\n        const receipt = await tx.wait();\n        gasUsed = receipt.gasUsed.toString();\n        const updatedText = await contract.storedText();\n        setStoredText(updatedText);\n      }\n      setGasLogs([...gasLogs, {\n        type,\n        gasUsed\n      }]);\n    } catch (error) {\n      console.error(\"Transaction failed:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gas Fee Comparison\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"memory\"),\n      style: styles.button,\n      children: \"Test Memory Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"storage\"),\n      style: styles.button,\n      children: \"Test Storage Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), storedText && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Stored Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 31\n      }, this), \" \", storedText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Transaction History:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: gasLogs.map((log, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: styles.listItem,\n        children: [\"\\u2705 \", log.type, \" - \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Gas Used:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 40\n        }, this), \" \", log.gasUsed]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(GasTracker, \"J/RDg6uWDon7QEQmTWvBGjFAHyI=\");\n_c = GasTracker;\nconst styles = {\n  container: {\n    maxWidth: \"500px\",\n    margin: \"20px auto\",\n    textAlign: \"center\",\n    fontFamily: \"Arial, sans-serif\"\n  },\n  button: {\n    padding: \"10px 15px\",\n    margin: \"5px\",\n    borderRadius: \"5px\",\n    backgroundColor: \"#007BFF\",\n    color: \"white\",\n    border: \"none\",\n    cursor: \"pointer\"\n  },\n  listItem: {\n    textAlign: \"left\",\n    marginTop: \"5px\"\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"GasTracker\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","contractAddress","contractABI","GasTracker","_s","gasLogs","setGasLogs","storedText","setStoredText","executeTransaction","type","window","ethereum","alert","provider","BrowserProvider","signer","getSigner","contract","Contract","gasUsed","startGas","getFeeData","updateWithMemory","endGas","gasPrice","toString","tx","updateWithStorage","receipt","wait","updatedText","error","console","style","styles","container","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","button","map","log","index","listItem","_c","maxWidth","margin","textAlign","fontFamily","padding","borderRadius","backgroundColor","color","border","cursor","marginTop","$RefreshReg$"],"sources":["/home/rohit/frontend/src/GasTracker.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst contractAddress = \"0x41d63CeB5a7B86197D788b8a8830337903Ffd3A0\";\nconst contractABI = [\n    \"function updateWithMemory(string memory newText) public pure returns (string memory)\",\n    \"function updateWithStorage(string memory newText) public\",\n    \"function storedText() public view returns (string)\",\n    \"event TransactionDone(uint256 gasUsed, string transactionType)\"\n];\n\nexport default function GasTracker() {\n    const [gasLogs, setGasLogs] = useState([]);\n    const [storedText, setStoredText] = useState(\"\");\n\n    async function executeTransaction(type) {\n        if (!window.ethereum) return alert(\"Please install MetaMask\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        try {\n            let gasUsed = 0;\n\n            if (type === \"memory\") {\n                const startGas = await provider.getFeeData();\n                await contract.updateWithMemory(\"Temporary Note\");\n                const endGas = await provider.getFeeData();\n                gasUsed = (endGas.gasPrice - startGas.gasPrice).toString();\n            } else {\n                const tx = await contract.updateWithStorage(\"Permanent Note\");\n                const receipt = await tx.wait();\n                gasUsed = receipt.gasUsed.toString();\n\n                const updatedText = await contract.storedText();\n                setStoredText(updatedText);\n            }\n\n            setGasLogs([...gasLogs, { type, gasUsed }]);\n        } catch (error) {\n            console.error(\"Transaction failed:\", error);\n        }\n    }\n\n    return (\n        <div style={styles.container}>\n            <h2>Gas Fee Comparison</h2>\n\n            <button onClick={() => executeTransaction(\"memory\")} style={styles.button}>Test Memory Transaction</button>\n            <button onClick={() => executeTransaction(\"storage\")} style={styles.button}>Test Storage Transaction</button>\n\n            {storedText && <p><strong>Stored Text:</strong> {storedText}</p>}\n\n            <h3>Transaction History:</h3>\n            <ul>\n                {gasLogs.map((log, index) => (\n                    <li key={index} style={styles.listItem}>\n                        âœ… {log.type} - <strong>Gas Used:</strong> {log.gasUsed}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nconst styles = {\n    container: { maxWidth: \"500px\", margin: \"20px auto\", textAlign: \"center\", fontFamily: \"Arial, sans-serif\" },\n    button: { padding: \"10px 15px\", margin: \"5px\", borderRadius: \"5px\", backgroundColor: \"#007BFF\", color: \"white\", border: \"none\", cursor: \"pointer\" },\n    listItem: { textAlign: \"left\", marginTop: \"5px\" }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}