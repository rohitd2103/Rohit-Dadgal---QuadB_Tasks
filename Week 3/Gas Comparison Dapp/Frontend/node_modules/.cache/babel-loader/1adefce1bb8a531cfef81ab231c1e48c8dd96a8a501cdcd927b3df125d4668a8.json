{"ast":null,"code":"var _jsxFileName = \"/home/rohit/frontend/src/components/GasComparison.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\"function updateWithMemory(string memory newText) public pure returns (string memory)\", \"function updateWithStorage(string memory newText) public\"];\nexport default function GasComparison() {\n  _s();\n  const [memoryGas, setMemoryGas] = useState(null);\n  const [storageGas, setStorageGas] = useState(null);\n  async function executeTransaction(type) {\n    if (!window.ethereum) return alert(\"Please install MetaMask\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n    let tx;\n    if (type === \"memory\") {\n      tx = await contract.updateWithMemory(\"Temporary Note\");\n    } else {\n      tx = await contract.updateWithStorage(\"Permanent Note\");\n    }\n    const receipt = await tx.wait();\n    const gasUsed = receipt.gasUsed.toString();\n    if (type === \"memory\") {\n      setMemoryGas(gasUsed);\n    } else {\n      setStorageGas(gasUsed);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gas Comparison\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"memory\"),\n      children: \"Memory Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), memoryGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gas Used: \", memoryGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"storage\"),\n      children: \"Storage Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), storageGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gas Used: \", storageGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 28\n    }, this), memoryGas && storageGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: memoryGas > storageGas ? \"Memory transaction used more gas.\" : \"Storage transaction used more gas.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(GasComparison, \"bq9RnCqm2UwaEFWjxZ4JTeEFsLk=\");\n_c = GasComparison;\nvar _c;\n$RefreshReg$(_c, \"GasComparison\");","map":{"version":3,"names":["useState","ethers","jsxDEV","_jsxDEV","contractAddress","contractABI","GasComparison","_s","memoryGas","setMemoryGas","storageGas","setStorageGas","executeTransaction","type","window","ethereum","alert","provider","BrowserProvider","signer","getSigner","contract","Contract","tx","updateWithMemory","updateWithStorage","receipt","wait","gasUsed","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/rohit/frontend/src/components/GasComparison.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\n    \"function updateWithMemory(string memory newText) public pure returns (string memory)\",\n    \"function updateWithStorage(string memory newText) public\",\n];\n\nexport default function GasComparison() {\n    const [memoryGas, setMemoryGas] = useState(null);\n    const [storageGas, setStorageGas] = useState(null);\n\n    async function executeTransaction(type) {\n        if (!window.ethereum) return alert(\"Please install MetaMask\");\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let tx;\n        if (type === \"memory\") {\n            tx = await contract.updateWithMemory(\"Temporary Note\");\n        } else {\n            tx = await contract.updateWithStorage(\"Permanent Note\");\n        }\n\n        const receipt = await tx.wait();\n        const gasUsed = receipt.gasUsed.toString();\n\n        if (type === \"memory\") {\n            setMemoryGas(gasUsed);\n        } else {\n            setStorageGas(gasUsed);\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>Gas Comparison</h1>\n            <button onClick={() => executeTransaction(\"memory\")}>Memory Transaction</button>\n            {memoryGas && <p>Gas Used: {memoryGas}</p>}\n            <button onClick={() => executeTransaction(\"storage\")}>Storage Transaction</button>\n            {storageGas && <p>Gas Used: {storageGas}</p>}\n            {memoryGas && storageGas && (\n                <p>\n                    {memoryGas > storageGas\n                        ? \"Memory transaction used more gas.\"\n                        : \"Storage transaction used more gas.\"}\n                </p>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}