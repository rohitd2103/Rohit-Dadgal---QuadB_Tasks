{"ast":null,"code":"var _jsxFileName = \"/home/rohit/frontend/src/components/GasComparison.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\"function updateWithMemory(string memory newText) public pure returns (string memory)\", \"function updateWithStorage(string memory newText) public\", \"function storedText() public view returns (string)\"];\nexport default function GasComparison() {\n  _s();\n  const [memoryResult, setMemoryResult] = useState(\"\");\n  const [storedNote, setStoredNote] = useState(\"\");\n  const [memoryGas, setMemoryGas] = useState(null);\n  const [storageGas, setStorageGas] = useState(null);\n  async function executeTransaction(type) {\n    if (!window.ethereum) return alert(\"Please install MetaMask\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n    try {\n      if (type === \"memory\") {\n        const startGas = await provider.getFeeData();\n        const result = await contract.updateWithMemory(\"Temporary Note\");\n        const endGas = await provider.getFeeData();\n        setMemoryResult(result);\n        setMemoryGas((endGas.gasPrice - startGas.gasPrice).toString());\n      } else {\n        const tx = await contract.updateWithStorage(\"Permanent Note\");\n        const receipt = await tx.wait();\n        setStorageGas(receipt.gasUsed.toString());\n\n        // Fetch the updated stored text\n        const updatedText = await contract.storedText();\n        setStoredNote(updatedText);\n      }\n    } catch (error) {\n      console.error(\"Transaction failed:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"400px\",\n      margin: \"20px auto\",\n      textAlign: \"center\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Note Storage Comparison\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"memory\"),\n      style: buttonStyle,\n      children: \"Test Memory Function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), memoryResult && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Memory Output:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }, this), \" \", memoryResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 30\n    }, this), memoryGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Gas Used:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 30\n      }, this), \" \", memoryGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"storage\"),\n      style: buttonStyle,\n      children: \"Test Storage Function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), storedNote && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Stored Note:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 31\n      }, this), \" \", storedNote]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 28\n    }, this), storageGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Gas Used:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 31\n      }, this), \" \", storageGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(GasComparison, \"xZuAUYg59XX7NEyW1coKSGkLp2c=\");\n_c = GasComparison;\nconst buttonStyle = {\n  padding: \"10px 15px\",\n  fontSize: \"16px\",\n  margin: \"10px\",\n  borderRadius: \"5px\",\n  border: \"none\",\n  cursor: \"pointer\",\n  backgroundColor: \"#007BFF\",\n  color: \"white\"\n};\nvar _c;\n$RefreshReg$(_c, \"GasComparison\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","contractAddress","contractABI","GasComparison","_s","memoryResult","setMemoryResult","storedNote","setStoredNote","memoryGas","setMemoryGas","storageGas","setStorageGas","executeTransaction","type","window","ethereum","alert","provider","BrowserProvider","signer","getSigner","contract","Contract","startGas","getFeeData","result","updateWithMemory","endGas","gasPrice","toString","tx","updateWithStorage","receipt","wait","gasUsed","updatedText","storedText","error","console","style","maxWidth","margin","textAlign","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","buttonStyle","_c","padding","fontSize","borderRadius","border","cursor","backgroundColor","color","$RefreshReg$"],"sources":["/home/rohit/frontend/src/components/GasComparison.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\n    \"function updateWithMemory(string memory newText) public pure returns (string memory)\",\n    \"function updateWithStorage(string memory newText) public\",\n    \"function storedText() public view returns (string)\",\n];\n\nexport default function GasComparison() {\n    const [memoryResult, setMemoryResult] = useState(\"\");\n    const [storedNote, setStoredNote] = useState(\"\");\n    const [memoryGas, setMemoryGas] = useState(null);\n    const [storageGas, setStorageGas] = useState(null);\n\n    async function executeTransaction(type) {\n        if (!window.ethereum) return alert(\"Please install MetaMask\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        try {\n            if (type === \"memory\") {\n                const startGas = await provider.getFeeData();\n                const result = await contract.updateWithMemory(\"Temporary Note\");\n                const endGas = await provider.getFeeData();\n                setMemoryResult(result);\n                setMemoryGas((endGas.gasPrice - startGas.gasPrice).toString());\n            } else {\n                const tx = await contract.updateWithStorage(\"Permanent Note\");\n                const receipt = await tx.wait();\n                setStorageGas(receipt.gasUsed.toString());\n\n                // Fetch the updated stored text\n                const updatedText = await contract.storedText();\n                setStoredNote(updatedText);\n            }\n        } catch (error) {\n            console.error(\"Transaction failed:\", error);\n        }\n    }\n\n    return (\n        <div style={{ maxWidth: \"400px\", margin: \"20px auto\", textAlign: \"center\", fontFamily: \"Arial, sans-serif\" }}>\n            <h2>Note Storage Comparison</h2>\n\n            <button onClick={() => executeTransaction(\"memory\")} style={buttonStyle}>\n                Test Memory Function\n            </button>\n            {memoryResult && <p><strong>Memory Output:</strong> {memoryResult}</p>}\n            {memoryGas && <p><strong>Gas Used:</strong> {memoryGas}</p>}\n\n            <hr />\n\n            <button onClick={() => executeTransaction(\"storage\")} style={buttonStyle}>\n                Test Storage Function\n            </button>\n            {storedNote && <p><strong>Stored Note:</strong> {storedNote}</p>}\n            {storageGas && <p><strong>Gas Used:</strong> {storageGas}</p>}\n        </div>\n    );\n}\n\nconst buttonStyle = {\n    padding: \"10px 15px\",\n    fontSize: \"16px\",\n    margin: \"10px\",\n    borderRadius: \"5px\",\n    border: \"none\",\n    cursor: \"pointer\",\n    backgroundColor: \"#007BFF\",\n    color: \"white\"\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}