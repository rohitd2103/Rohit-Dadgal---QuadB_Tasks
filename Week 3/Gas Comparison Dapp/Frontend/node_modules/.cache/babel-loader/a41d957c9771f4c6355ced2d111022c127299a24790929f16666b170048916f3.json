{"ast":null,"code":"var _jsxFileName = \"/home/rohit/frontend/src/components/GasComparison.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\"function updateWithMemory(string memory newText) public pure returns (string memory)\", \"function updateWithStorage(string memory newText) public\"];\nexport default function GasComparison() {\n  _s();\n  const [memoryGas, setMemoryGas] = useState(null);\n  const [storageGas, setStorageGas] = useState(null);\n  async function executeTransaction(type) {\n    if (!window.ethereum) return alert(\"Please install MetaMask\");\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n    let tx;\n    try {\n      if (type === \"memory\") {\n        // Calling a pure function does not return a transaction, so we just call it and return\n        const result = await contract.updateWithMemory(\"Temporary Note\");\n        console.log(\"Memory Function Output:\", result);\n        alert(\"Memory function executed, but does not consume gas!\");\n        return;\n      } else {\n        // Storage function does modify the blockchain, so it returns a transaction\n        tx = await contract.updateWithStorage(\"Permanent Note\");\n        const receipt = await tx.wait(); // Wait for confirmation\n        setStorageGas(receipt.gasUsed.toString());\n        console.log(\"Storage Gas Used:\", receipt.gasUsed.toString());\n      }\n    } catch (error) {\n      console.error(\"Transaction failed:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gas Comparison\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"memory\"),\n      children: \"Memory Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), memoryGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gas Used: \", memoryGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => executeTransaction(\"storage\"),\n      children: \"Storage Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), storageGas && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gas Used: \", storageGas]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(GasComparison, \"bq9RnCqm2UwaEFWjxZ4JTeEFsLk=\");\n_c = GasComparison;\nvar _c;\n$RefreshReg$(_c, \"GasComparison\");","map":{"version":3,"names":["useState","ethers","jsxDEV","_jsxDEV","contractAddress","contractABI","GasComparison","_s","memoryGas","setMemoryGas","storageGas","setStorageGas","executeTransaction","type","window","ethereum","alert","provider","BrowserProvider","signer","getSigner","contract","Contract","tx","result","updateWithMemory","console","log","updateWithStorage","receipt","wait","gasUsed","toString","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/rohit/frontend/src/components/GasComparison.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst contractAddress = \"0x1a5FFC58919A9CEc8cAAc1b82c84ECFc9e5fbFb2\";\nconst contractABI = [\n    \"function updateWithMemory(string memory newText) public pure returns (string memory)\",\n    \"function updateWithStorage(string memory newText) public\",\n];\n\nexport default function GasComparison() {\n    const [memoryGas, setMemoryGas] = useState(null);\n    const [storageGas, setStorageGas] = useState(null);\n\n    async function executeTransaction(type) {\n        if (!window.ethereum) return alert(\"Please install MetaMask\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let tx;\n        try {\n            if (type === \"memory\") {\n                // Calling a pure function does not return a transaction, so we just call it and return\n                const result = await contract.updateWithMemory(\"Temporary Note\");\n                console.log(\"Memory Function Output:\", result);\n                alert(\"Memory function executed, but does not consume gas!\");\n                return;\n            } else {\n                // Storage function does modify the blockchain, so it returns a transaction\n                tx = await contract.updateWithStorage(\"Permanent Note\");\n                const receipt = await tx.wait(); // Wait for confirmation\n                setStorageGas(receipt.gasUsed.toString());\n                console.log(\"Storage Gas Used:\", receipt.gasUsed.toString());\n            }\n        } catch (error) {\n            console.error(\"Transaction failed:\", error);\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>Gas Comparison</h1>\n            <button onClick={() => executeTransaction(\"memory\")}>Memory Transaction</button>\n            {memoryGas && <p>Gas Used: {memoryGas}</p>}\n            <button onClick={() => executeTransaction(\"storage\")}>Storage Transaction</button>\n            {storageGas && <p>Gas Used: {storageGas}</p>}\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}