// pages/api/transact.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { AptosClient, FaucetClient, HexString, TxnBuilderTypes, BCS, AptosAccount } from "aptos";

const NODE_URL = "https://fullnode.devnet.aptoslabs.com/v1";
const FAUCET_URL = "https://faucet.devnet.aptoslabs.com";
const MODULE_ADDRESS = "0xf33a08fd01f431367a75c3f9d2360688cb5b3b14a1e73608214e684becfea926";

const client = new AptosClient(NODE_URL);
const faucet = new FaucetClient(NODE_URL, FAUCET_URL);

// Use your local private key (generated by aptos CLI)
const PRIVATE_KEY = "0x40e1402bd665c0c08f99e18f8bdcd8a44f5d0b80a0c4223e3b559441201db38e"; // replace this with your actual private key hex
const account = AptosAccount.fromAptosAccountObject({ privateKeyHex: PRIVATE_KEY });

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    await faucet.fundAccount(account.address(), 100_000_000); // Make sure you have funds

    const storeTx = await client.generateTransaction(account.address(), {
      function: `${MODULE_ADDRESS}::Refund::store_refund_data`,
      type_arguments: [],
      arguments: [999],
    });

    const storeSigned = await client.signTransaction(account, storeTx);
    const storeResult = await client.submitTransaction(storeSigned);
    await client.waitForTransaction(storeResult.hash);

    const beforeGas = (await client.getTransactionByHash(storeResult.hash))["gas_used"];

    const deleteTx = await client.generateTransaction(account.address(), {
      function: `${MODULE_ADDRESS}::Refund::delete_refund_data`,
      type_arguments: [],
      arguments: [],
    });

    const deleteSigned = await client.signTransaction(account, deleteTx);
    const deleteResult = await client.submitTransaction(deleteSigned);
    await client.waitForTransaction(deleteResult.hash);

    const afterGas = (await client.getTransactionByHash(deleteResult.hash))["gas_used"];

    res.status(200).json({ beforeGas, afterGas });
  } catch (error: any) {
    console.error("Transaction error", error);
    res.status(500).json({ error: error.message || "Something went wrong" });
  }
}
